{"ast":null,"code":"var accounting = require('accounting');\n\nvar assign = require('object-assign');\n\nvar localeCurrency = require('locale-currency');\n\nvar currencies = require('./currencies.json');\n\nvar localeFormats = require('./localeFormats.json');\n\nvar defaultCurrency = {\n  symbol: '',\n  thousandsSeparator: ',',\n  decimalSeparator: '.',\n  symbolOnLeft: true,\n  spaceBetweenAmountAndSymbol: false,\n  decimalDigits: 2\n};\nvar defaultLocaleFormat = {};\nvar formatMapping = [{\n  symbolOnLeft: true,\n  spaceBetweenAmountAndSymbol: false,\n  format: {\n    pos: '%s%v',\n    neg: '-%s%v',\n    zero: '%s%v'\n  }\n}, {\n  symbolOnLeft: true,\n  spaceBetweenAmountAndSymbol: true,\n  format: {\n    pos: '%s %v',\n    neg: '-%s %v',\n    zero: '%s %v'\n  }\n}, {\n  symbolOnLeft: false,\n  spaceBetweenAmountAndSymbol: false,\n  format: {\n    pos: '%v%s',\n    neg: '-%v%s',\n    zero: '%v%s'\n  }\n}, {\n  symbolOnLeft: false,\n  spaceBetweenAmountAndSymbol: true,\n  format: {\n    pos: '%v %s',\n    neg: '-%v %s',\n    zero: '%v %s'\n  }\n}];\n\nfunction format(value, options) {\n  var code = options.code || options.locale && localeCurrency.getCurrency(options.locale);\n  var localeMatch = /^([a-z]+)([_-]([a-z]+))?$/i.exec(options.locale) || [];\n  var language = localeMatch[1];\n  var region = localeMatch[3];\n  var localeFormat = assign({}, defaultLocaleFormat, localeFormats[language] || {}, localeFormats[language + '-' + region] || {});\n  var currency = assign({}, defaultCurrency, findCurrency(code), localeFormat);\n  var symbolOnLeft = currency.symbolOnLeft;\n  var spaceBetweenAmountAndSymbol = currency.spaceBetweenAmountAndSymbol;\n  var format = formatMapping.filter(function (f) {\n    return f.symbolOnLeft == symbolOnLeft && f.spaceBetweenAmountAndSymbol == spaceBetweenAmountAndSymbol;\n  })[0].format;\n  return accounting.formatMoney(value, {\n    symbol: isUndefined(options.symbol) ? currency.symbol : options.symbol,\n    decimal: isUndefined(options.decimal) ? currency.decimalSeparator : options.decimal,\n    thousand: isUndefined(options.thousand) ? currency.thousandsSeparator : options.thousand,\n    precision: typeof options.precision === 'number' ? options.precision : currency.decimalDigits,\n    format: ['string', 'object'].indexOf(typeof options.format) > -1 ? options.format : format\n  });\n}\n\nfunction findCurrency(currencyCode) {\n  return currencies[currencyCode];\n}\n\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\nfunction unformat(value, options) {\n  var code = options.code || options.locale && localeCurrency.getCurrency(options.locale);\n  var localeFormat = localeFormats[options.locale] || defaultLocaleFormat;\n  var currency = assign({}, defaultCurrency, findCurrency(code), localeFormat);\n  var decimal = isUndefined(options.decimal) ? currency.decimalSeparator : options.decimal;\n  return accounting.unformat(value, decimal);\n}\n\nmodule.exports = {\n  defaultCurrency: defaultCurrency,\n\n  get currencies() {\n    // In favor of backwards compatibility, the currencies map is converted to an array here\n    return Object.keys(currencies).map(function (key) {\n      return currencies[key];\n    });\n  },\n\n  findCurrency: findCurrency,\n  format: format,\n  unformat: unformat\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*!\n * accounting.js v0.4.1\n * Copyright 2014 Open Exchange Rates\n *\n * Freely distributable under the MIT license.\n * Portions of accounting.js are inspired or borrowed from underscore.js\n *\n * Full details and documentation:\n * http://openexchangerates.github.io/accounting.js/\n */\n(function (root, undefined) {\n  /* --- Setup --- */\n  // Create the local library object, to be exported or referenced globally later\n  var lib = {}; // Current version\n\n  lib.version = '0.4.1';\n  /* --- Exposed settings --- */\n  // The library's settings configuration object. Contains default parameters for\n  // currency and number formatting\n\n  lib.settings = {\n    currency: {\n      symbol: \"$\",\n      // default currency symbol is '$'\n      format: \"%s%v\",\n      // controls output: %s = symbol, %v = value (can be object, see docs)\n      decimal: \".\",\n      // decimal point separator\n      thousand: \",\",\n      // thousands separator\n      precision: 2,\n      // decimal places\n      grouping: 3 // digit grouping (not implemented yet)\n\n    },\n    number: {\n      precision: 0,\n      // default precision on numbers is 0\n      grouping: 3,\n      // digit grouping (not implemented yet)\n      thousand: \",\",\n      decimal: \".\"\n    }\n  };\n  /* --- Internal Helper Methods --- */\n  // Store reference to possibly-available ECMAScript 5 methods for later\n\n  var nativeMap = Array.prototype.map,\n      nativeIsArray = Array.isArray,\n      toString = Object.prototype.toString;\n  /**\n   * Tests whether supplied parameter is a string\n   * from underscore.js\n   */\n\n  function isString(obj) {\n    return !!(obj === '' || obj && obj.charCodeAt && obj.substr);\n  }\n  /**\n   * Tests whether supplied parameter is a string\n   * from underscore.js, delegates to ECMA5's native Array.isArray\n   */\n\n\n  function isArray(obj) {\n    return nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n  }\n  /**\n   * Tests whether supplied parameter is a true object\n   */\n\n\n  function isObject(obj) {\n    return obj && toString.call(obj) === '[object Object]';\n  }\n  /**\n   * Extends an object with a defaults object, similar to underscore's _.defaults\n   *\n   * Used for abstracting parameter handling from API methods\n   */\n\n\n  function defaults(object, defs) {\n    var key;\n    object = object || {};\n    defs = defs || {}; // Iterate over object non-prototype properties:\n\n    for (key in defs) {\n      if (defs.hasOwnProperty(key)) {\n        // Replace values with defaults only if undefined (allow empty/zero values):\n        if (object[key] == null) object[key] = defs[key];\n      }\n    }\n\n    return object;\n  }\n  /**\n   * Implementation of `Array.map()` for iteration loops\n   *\n   * Returns a new Array as a result of calling `iterator` on each array value.\n   * Defers to native Array.map if available\n   */\n\n\n  function map(obj, iterator, context) {\n    var results = [],\n        i,\n        j;\n    if (!obj) return results; // Use native .map method if it exists:\n\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context); // Fallback for native .map:\n\n    for (i = 0, j = obj.length; i < j; i++) {\n      results[i] = iterator.call(context, obj[i], i, obj);\n    }\n\n    return results;\n  }\n  /**\n   * Check and normalise the value of precision (must be positive integer)\n   */\n\n\n  function checkPrecision(val, base) {\n    val = Math.round(Math.abs(val));\n    return isNaN(val) ? base : val;\n  }\n  /**\n   * Parses a format string or object and returns format obj for use in rendering\n   *\n   * `format` is either a string with the default (positive) format, or object\n   * containing `pos` (required), `neg` and `zero` values (or a function returning\n   * either a string or object)\n   *\n   * Either string or format.pos must contain \"%v\" (value) to be valid\n   */\n\n\n  function checkCurrencyFormat(format) {\n    var defaults = lib.settings.currency.format; // Allow function as format parameter (should return string or object):\n\n    if (typeof format === \"function\") format = format(); // Format can be a string, in which case `value` (\"%v\") must be present:\n\n    if (isString(format) && format.match(\"%v\")) {\n      // Create and return positive, negative and zero formats:\n      return {\n        pos: format,\n        neg: format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\n        zero: format\n      }; // If no format, or object is missing valid positive value, use defaults:\n    } else if (!format || !format.pos || !format.pos.match(\"%v\")) {\n      // If defaults is a string, casts it to an object for faster checking next time:\n      return !isString(defaults) ? defaults : lib.settings.currency.format = {\n        pos: defaults,\n        neg: defaults.replace(\"%v\", \"-%v\"),\n        zero: defaults\n      };\n    } // Otherwise, assume format was fine:\n\n\n    return format;\n  }\n  /* --- API Methods --- */\n\n  /**\n   * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n   * Alias: `accounting.parse(string)`\n   *\n   * Decimal must be included in the regular expression to match floats (defaults to\n   * accounting.settings.number.decimal), so if the number uses a non-standard decimal \n   * separator, provide it as the second argument.\n   *\n   * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n   *\n   * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n   */\n\n\n  var unformat = lib.unformat = lib.parse = function (value, decimal) {\n    // Recursively unformat arrays:\n    if (isArray(value)) {\n      return map(value, function (val) {\n        return unformat(val, decimal);\n      });\n    } // Fails silently (need decent errors):\n\n\n    value = value || 0; // Return the value as-is if it's already a number:\n\n    if (typeof value === \"number\") return value; // Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n\n    decimal = decimal || lib.settings.number.decimal; // Build regex to strip out everything except digits, decimal point and minus sign:\n\n    var regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]),\n        unformatted = parseFloat((\"\" + value).replace(/\\((.*)\\)/, \"-$1\") // replace bracketed values with negatives\n    .replace(regex, '') // strip out any cruft\n    .replace(decimal, '.') // make sure decimal point is standard\n    ); // This will fail silently which may cause trouble, let's wait and see:\n\n    return !isNaN(unformatted) ? unformatted : 0;\n  };\n  /**\n   * Implementation of toFixed() that treats floats more like decimals\n   *\n   * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n   * problems for accounting- and finance-related software.\n   */\n\n\n  var toFixed = lib.toFixed = function (value, precision) {\n    precision = checkPrecision(precision, lib.settings.number.precision);\n    var power = Math.pow(10, precision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n    return (Math.round(lib.unformat(value) * power) / power).toFixed(precision);\n  };\n  /**\n   * Format a number, with comma-separated thousands and custom precision/decimal places\n   * Alias: `accounting.format()`\n   *\n   * Localise by overriding the precision and thousand / decimal separators\n   * 2nd parameter `precision` can be an object matching `settings.number`\n   */\n\n\n  var formatNumber = lib.formatNumber = lib.format = function (number, precision, thousand, decimal) {\n    // Resursively format arrays:\n    if (isArray(number)) {\n      return map(number, function (val) {\n        return formatNumber(val, precision, thousand, decimal);\n      });\n    } // Clean up number:\n\n\n    number = unformat(number); // Build options object from second param (if object) or all params, extending defaults:\n\n    var opts = defaults(isObject(precision) ? precision : {\n      precision: precision,\n      thousand: thousand,\n      decimal: decimal\n    }, lib.settings.number),\n        // Clean up precision\n    usePrecision = checkPrecision(opts.precision),\n        // Do some calc:\n    negative = number < 0 ? \"-\" : \"\",\n        base = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\",\n        mod = base.length > 3 ? base.length % 3 : 0; // Format the number:\n\n    return negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\n  };\n  /**\n   * Format a number into currency\n   *\n   * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n   * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n   *\n   * Localise by overriding the symbol, precision, thousand / decimal separators and format\n   * Second param can be an object matching `settings.currency` which is the easiest way.\n   *\n   * To do: tidy up the parameters\n   */\n\n\n  var formatMoney = lib.formatMoney = function (number, symbol, precision, thousand, decimal, format) {\n    // Resursively format arrays:\n    if (isArray(number)) {\n      return map(number, function (val) {\n        return formatMoney(val, symbol, precision, thousand, decimal, format);\n      });\n    } // Clean up number:\n\n\n    number = unformat(number); // Build options object from second param (if object) or all params, extending defaults:\n\n    var opts = defaults(isObject(symbol) ? symbol : {\n      symbol: symbol,\n      precision: precision,\n      thousand: thousand,\n      decimal: decimal,\n      format: format\n    }, lib.settings.currency),\n        // Check format (returns object with pos, neg and zero):\n    formats = checkCurrencyFormat(opts.format),\n        // Choose which format to use for this value:\n    useFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero; // Return with currency symbol added:\n\n    return useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n  };\n  /**\n   * Format a list of numbers into an accounting column, padding with whitespace\n   * to line up currency symbols, thousand separators and decimals places\n   *\n   * List should be an array of numbers\n   * Second parameter can be an object containing keys that match the params\n   *\n   * Returns array of accouting-formatted number strings of same length\n   *\n   * NB: `white-space:pre` CSS rule is required on the list container to prevent\n   * browsers from collapsing the whitespace in the output strings.\n   */\n\n\n  lib.formatColumn = function (list, symbol, precision, thousand, decimal, format) {\n    if (!list) return []; // Build options object from second param (if object) or all params, extending defaults:\n\n    var opts = defaults(isObject(symbol) ? symbol : {\n      symbol: symbol,\n      precision: precision,\n      thousand: thousand,\n      decimal: decimal,\n      format: format\n    }, lib.settings.currency),\n        // Check format (returns object with pos, neg and zero), only need pos for now:\n    formats = checkCurrencyFormat(opts.format),\n        // Whether to pad at start of string or after currency symbol:\n    padAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\") ? true : false,\n        // Store value for the length of the longest string in the column:\n    maxLength = 0,\n        // Format the list according to options, store the length of the longest string:\n    formatted = map(list, function (val, i) {\n      if (isArray(val)) {\n        // Recursively format columns if list is a multi-dimensional array:\n        return lib.formatColumn(val, opts);\n      } else {\n        // Clean up the value\n        val = unformat(val); // Choose which format to use for this value (pos, neg or zero):\n\n        var useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero,\n            // Format this value, push into formatted list and save the length:\n        fVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n        if (fVal.length > maxLength) maxLength = fVal.length;\n        return fVal;\n      }\n    }); // Pad each number in the list and send back the column of numbers:\n\n    return map(formatted, function (val, i) {\n      // Only if this is a string (not a nested array, which would have already been padded):\n      if (isString(val) && val.length < maxLength) {\n        // Depending on symbol position, pad after symbol or at index 0:\n        return padAfterSymbol ? val.replace(opts.symbol, opts.symbol + new Array(maxLength - val.length + 1).join(\" \")) : new Array(maxLength - val.length + 1).join(\" \") + val;\n      }\n\n      return val;\n    });\n  };\n  /* --- Module Definition --- */\n  // Export accounting for CommonJS. If being loaded as an AMD module, define it as such.\n  // Otherwise, just add `accounting` to the global object\n\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = lib;\n    }\n\n    exports.accounting = lib;\n  } else if (typeof define === 'function' && define.amd) {\n    // Return the library as an AMD module:\n    define([], function () {\n      return lib;\n    });\n  } else {\n    // Use accounting.noConflict to restore `accounting` back to its original value.\n    // Returns a reference to the library's `accounting` object;\n    // e.g. `var numbers = accounting.noConflict();`\n    lib.noConflict = function (oldAccounting) {\n      return function () {\n        // Reset the value of the root's `accounting` variable:\n        root.accounting = oldAccounting; // Delete the noConflict method:\n\n        lib.noConflict = undefined; // Return reference to the library to re-assign it:\n\n        return lib;\n      };\n    }(root.accounting); // Declare `fx` on the root (global/window) object:\n\n\n    root['accounting'] = lib;\n  } // Root will be `window` in browser or `global` on the server:\n\n})(this);","map":null,"metadata":{},"sourceType":"script"}